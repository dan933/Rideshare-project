{
    "type": [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2
    ],
    "data": [
        "",
        "> ",
        "library(readxl)",
        "> ",
        "Uber_Trip_Details <- read_excel(\"\\\\Uber_Trip_Details.xlsx\", ",
        "+ ",
        "                                col_types = c(\"date\", \"date\", \"date\", ",
        "+ ",
        "                                              \"date\", \"numeric\", \"numeric\", \"numeric\", ",
        "+ ",
        "                                              \"numeric\", \"numeric\", \"numeric\", ",
        "+ ",
        "                                              \"numeric\", \"text\", \"numeric\", \"text\", ",
        "+ ",
        "                                              \"numeric\", \"numeric\"))",
        "Error: `path` does not exist: ‘\\Uber_Trip_Details.xlsx’\n",
        "> ",
        "",
        "> ",
        "#Change Column Names",
        "> ",
        "names(Uber_Trip_Details)[3] <- \"Pick_Up_Time\"",
        "Error in names(Uber_Trip_Details)[3] <- \"Pick_Up_Time\" : \n  object 'Uber_Trip_Details' not found\n",
        "> ",
        "names(Uber_Trip_Details)[4] <- \"Drop_Off_Time\"",
        "Error in names(Uber_Trip_Details)[4] <- \"Drop_Off_Time\" : \n  object 'Uber_Trip_Details' not found\n",
        "> ",
        "",
        "> ",
        "#as Charecter",
        "> ",
        "PUTimes <- as.character(Uber_Trip_Details$Pick_Up_Time)",
        "Error: object 'Uber_Trip_Details' not found\n",
        "> ",
        "",
        "> ",
        "#splits data into sublists ",
        "> ",
        "PUTimes <- strsplit(PUTimes,split = \" \")",
        "Error in strsplit(PUTimes, split = \" \") : object 'PUTimes' not found\n",
        "> ",
        "",
        "> ",
        "#turn into one whole list",
        "> ",
        "PUTimes <- unlist(PUTimes,recursive = FALSE)",
        "Error in unlist(PUTimes, recursive = FALSE) : object 'PUTimes' not found\n",
        "> ",
        "",
        "> ",
        "#turn into dataframe ",
        "> ",
        "PUTimes <- data.frame(PUTimes)",
        "Error in data.frame(PUTimes) : object 'PUTimes' not found\n",
        "> ",
        "",
        "> ",
        "#removes odds from data ",
        "> ",
        "PUTimes <- PUTimes[c(FALSE,TRUE),]",
        "Error: object 'PUTimes' not found\n",
        "> ",
        "",
        "> ",
        "#turn into dataframe ",
        "> ",
        "PUTimes <- data.frame(PUTimes)",
        "Error in data.frame(PUTimes) : object 'PUTimes' not found\n",
        "> ",
        "",
        "> ",
        "#Changing Column Names",
        "> ",
        "names(PUTimes)[1] <- \"Pick_Up_Time\"",
        "Error in names(PUTimes)[1] <- \"Pick_Up_Time\" : object 'PUTimes' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Create Vector add the extra row",
        "> ",
        "PUTimes <- c(as.character(PUTimes$Pick_Up_Time))",
        "Error: object 'PUTimes' not found\n",
        "> ",
        "",
        "> ",
        "#Create the Data Frame",
        "> ",
        "",
        "> ",
        "PUTimes <- data.frame(PUTimes)",
        "Error in data.frame(PUTimes) : object 'PUTimes' not found\n",
        "> ",
        "",
        "> ",
        "#Convert to Charecter",
        "> ",
        "Uber_Trip_Details$Date <- as.character(Uber_Trip_Details$Date)",
        "Error: object 'Uber_Trip_Details' not found\n",
        "> ",
        "Uber_Trip_Details$Pick_Up_Time <- PUTimes$PUTimes",
        "Error: object 'PUTimes' not found\n",
        "> ",
        "",
        "> ",
        "#Change to Character the Pick_Up_Time Variable ",
        "> ",
        "Uber_Trip_Details$Pick_Up_Time <- as.character(Uber_Trip_Details$Pick_Up_Time)",
        "Error: object 'Uber_Trip_Details' not found\n",
        "> ",
        "",
        "> ",
        "#Combine the Two Strings ",
        "> ",
        "CPUT <- paste(Uber_Trip_Details$Date,PUTimes$PUTimes, sep = \"\")",
        "Error in paste(Uber_Trip_Details$Date, PUTimes$PUTimes, sep = \"\") : \n  object 'Uber_Trip_Details' not found\n",
        "> ",
        "",
        "> ",
        "#ADD to Dataframe ",
        "> ",
        "Uber_Trip_Details$Pick_Up_Time <- CPUT",
        "Error: object 'CPUT' not found\n",
        "> ",
        "",
        "> ",
        "#Convert To Date ",
        "> ",
        "Uber_Trip_Details$Pick_Up_Time <- strptime(Uber_Trip_Details$Pick_Up_Time, format = \"%Y-%m-%d %H:%M:%S\")",
        "Error in strptime(Uber_Trip_Details$Pick_Up_Time, format = \"%Y-%m-%d %H:%M:%S\") : \n  object 'Uber_Trip_Details' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Drop_OFF_TIME",
        "> ",
        "",
        "> ",
        "DOTimes <- as.character(Uber_Trip_Details$Drop_Off_Time)",
        "Error: object 'Uber_Trip_Details' not found\n",
        "> ",
        "",
        "> ",
        "#splits data into sublists ",
        "> ",
        "DOTimes <- strsplit(DOTimes,split = \" \")",
        "Error in strsplit(DOTimes, split = \" \") : object 'DOTimes' not found\n",
        "> ",
        "",
        "> ",
        "#turn into one whole list",
        "> ",
        "DOTimes <- unlist(DOTimes,recursive = FALSE)",
        "Error in unlist(DOTimes, recursive = FALSE) : object 'DOTimes' not found\n",
        "> ",
        "",
        "> ",
        "#turn into dataframe ",
        "> ",
        "DOTimes <- data.frame(DOTimes)",
        "Error in data.frame(DOTimes) : object 'DOTimes' not found\n",
        "> ",
        "",
        "> ",
        "#removes odds from data ",
        "> ",
        "DOTimes <- DOTimes[c(FALSE,TRUE),]",
        "Error: object 'DOTimes' not found\n",
        "> ",
        "",
        "> ",
        "DOTimes<- c(as.character(DOTimes))",
        "Error: object 'DOTimes' not found\n",
        "> ",
        "",
        "> ",
        "DFDOTimes <- data.frame(DOTimes)",
        "Error in data.frame(DOTimes) : object 'DOTimes' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Change to Charecter the DO Variable ",
        "> ",
        "Uber_Trip_Details$Drop_Off_Time <- as.character(Uber_Trip_Details$Drop_Off_Time)",
        "Error: object 'Uber_Trip_Details' not found\n",
        "> ",
        "",
        "> ",
        "#Combine the Two Strings ",
        "> ",
        "CPUT <- paste(Uber_Trip_Details$Date,DFDOTimes$DOTimes, sep = \"\")",
        "Error in paste(Uber_Trip_Details$Date, DFDOTimes$DOTimes, sep = \"\") : \n  object 'Uber_Trip_Details' not found\n",
        "> ",
        "",
        "> ",
        "#ADD to Dataframe ",
        "> ",
        "Uber_Trip_Details$Drop_Off_Time <- CPUT",
        "Error: object 'CPUT' not found\n",
        "> ",
        "Uber_Trip_Details$Drop_Off_Time<- strptime(Uber_Trip_Details$Drop_Off_Time, format = \"%Y-%m-%d %H:%M:%S\")",
        "Error in strptime(Uber_Trip_Details$Drop_Off_Time, format = \"%Y-%m-%d %H:%M:%S\") : \n  object 'Uber_Trip_Details' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Convert to Date ",
        "> ",
        "Uber_Trip_Details$Date <- as.Date(Uber_Trip_Details$Date,\"%Y-%m-%d\")",
        "Error in as.Date(Uber_Trip_Details$Date, \"%Y-%m-%d\") : \n  object 'Uber_Trip_Details' not found\n",
        "> ",
        "",
        "> ",
        "#Convert to Weekdays",
        "> ",
        "wkDays <- weekdays(as.Date(Uber_Trip_Details$Date,\"%Y-%m-%d\"))",
        "Error in as.Date(Uber_Trip_Details$Date, \"%Y-%m-%d\") : \n  object 'Uber_Trip_Details' not found\n",
        "> ",
        "",
        "> ",
        "#paste in Days Column ",
        "> ",
        "Uber_Trip_Details$Day <- wkDays",
        "Error: object 'wkDays' not found\n",
        "> ",
        "",
        "> ",
        "#Create New df to protect Uber data",
        "> ",
        "setupPUDO <- Uber_Trip_Details",
        "Error: object 'Uber_Trip_Details' not found\n",
        "> ",
        "",
        "> ",
        "#convert Time to 00:00 format ",
        "> ",
        "dataHour <- factor(paste(substr(setupPUDO$Pick_Up_Time,12,14),\"00:00\", sep = \"\"))",
        "Error in substr(setupPUDO$Pick_Up_Time, 12, 14) : \n  object 'setupPUDO' not found\n",
        "> ",
        "",
        "> ",
        "#Factor Days Mon-Sun ",
        "> ",
        "dataDay <- factor(setupPUDO$Day, levels = c(\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"),labels = c(\"Mon\",\"Tue\",\"Wed\",\"Thur\",\"Fri\",\"Sat\",\"Sun\"))",
        "Error in factor(setupPUDO$Day, levels = c(\"Monday\", \"Tuesday\", \"Wednesday\",  : \n  object 'setupPUDO' not found\n",
        "> ",
        "",
        "> ",
        "#add Price ",
        "> ",
        "dataPrice <- setupPUDO$Total",
        "Error: object 'setupPUDO' not found\n",
        "> ",
        "",
        "> ",
        "#Add Pick Up Location ",
        "> ",
        "PU_L <- setupPUDO$`Pick Up Location`",
        "Error: object 'setupPUDO' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Script to Group by Day and Hour",
        "> ",
        "",
        "> ",
        "df <- data.frame(dataDay,dataHour,dataPrice,PU_L)",
        "Error in data.frame(dataDay, dataHour, dataPrice, PU_L) : \n  object 'dataDay' not found\n",
        "> ",
        "names(df)[1] <- \"Day\"",
        "Error in names(df)[1] <- \"Day\" : names() applied to a non-vector\n",
        "> ",
        "names(df)[2] <- \"Hour\"",
        "Error in names(df)[2] <- \"Hour\" : names() applied to a non-vector\n",
        "> ",
        "names(df)[3] <- \"Price\"",
        "Error in names(df)[3] <- \"Price\" : names() applied to a non-vector\n",
        "> ",
        "names(df)[4] <- \"Suburb\"",
        "Error in names(df)[4] <- \"Suburb\" : names() applied to a non-vector\n",
        "> ",
        "",
        "> ",
        "#Sum Total by hour and Day ",
        "> ",
        "income_Ph_PD <- aggregate(df$Price, by=list(df$Day,df$Hour), FUN = sum, na.rm = TRUE)",
        "Error in df$Price : object of type 'closure' is not subsettable\n",
        "> ",
        "names(income_Ph_PD)[1] <- \"Day\"",
        "Error in names(income_Ph_PD)[1] <- \"Day\" : \n  object 'income_Ph_PD' not found\n",
        "> ",
        "names(income_Ph_PD)[2] <- \"Time\"",
        "Error in names(income_Ph_PD)[2] <- \"Time\" : \n  object 'income_Ph_PD' not found\n",
        "> ",
        "names(income_Ph_PD)[3] <- \"Sum_Price\"",
        "Error in names(income_Ph_PD)[3] <- \"Sum_Price\" : \n  object 'income_Ph_PD' not found\n",
        "> ",
        "",
        "> ",
        "#sort dataframe Mon-Sun",
        "> ",
        "income_Ph_PD <- income_Ph_PD %>% arrange(Day)",
        "Error in arrange(., Day) : object 'income_Ph_PD' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#df sum by weekdays",
        "> ",
        "IncomePD <-c(rowsum(income_Ph_PD$Sum_Price,income_Ph_PD$Day))",
        "Error in rowsum(income_Ph_PD$Sum_Price, income_Ph_PD$Day) : \n  object 'income_Ph_PD' not found\n",
        "> ",
        "",
        "> ",
        "PDD <- c(\"Mon\",\"Tue\",\"Wed\",\"Thur\",\"Fri\",\"Sat\",\"Sun\")",
        "> ",
        "IncomePD <- data.frame(PDD,IncomePD)",
        "Error in data.frame(PDD, IncomePD) : object 'IncomePD' not found\n",
        "> ",
        "names(IncomePD)[1] <- \"Days\"",
        "Error in names(IncomePD)[1] <- \"Days\" : object 'IncomePD' not found\n",
        "> ",
        "names(IncomePD)[2] <- \"Sum_Price\"",
        "Error in names(IncomePD)[2] <- \"Sum_Price\" : object 'IncomePD' not found\n",
        "> ",
        "",
        "> ",
        "#Order Factor Mon-Sun ",
        "> ",
        "IncomePD$Days <-factor(IncomePD$Days, levels = c(\"Mon\",\"Tue\",\"Wed\",\"Thur\",\"Fri\",\"Sat\",\"Sun\"))",
        "Error in factor(IncomePD$Days, levels = c(\"Mon\", \"Tue\", \"Wed\", \"Thur\",  : \n  object 'IncomePD' not found\n",
        "> ",
        "",
        "> ",
        "#Maps ",
        "> ",
        "",
        "> ",
        "#aggregate based on lon and LT",
        "> ",
        "grouping_df <- aggregate(df$Price, by=list(df$Suburb,df$Day,df$Hour), FUN = sum, na.rm = TRUE)",
        "Error in df$Price : object of type 'closure' is not subsettable\n",
        "> ",
        "names(grouping_df)[1] <- \"Suburb\"",
        "Error in names(grouping_df)[1] <- \"Suburb\" : \n  object 'grouping_df' not found\n",
        "> ",
        "names(grouping_df)[2] <- \"Day\"",
        "Error in names(grouping_df)[2] <- \"Day\" : object 'grouping_df' not found\n",
        "> ",
        "names(grouping_df)[3] <- \"Hour\"",
        "Error in names(grouping_df)[3] <- \"Hour\" : object 'grouping_df' not found\n",
        "> ",
        "names(grouping_df)[4] <- \"Price\"",
        "Error in names(grouping_df)[4] <- \"Price\" : \n  object 'grouping_df' not found\n",
        "> ",
        "",
        "> ",
        "grouping_df <- arrange(grouping_df,Suburb,Day)",
        "Error in arrange(grouping_df, Suburb, Day) : \n  object 'grouping_df' not found\n",
        "> ",
        "",
        "> ",
        "#Import postcodes_geo",
        "> ",
        "postcodes_geo <- read.table(\"\\\\postcodes.csv\",header = TRUE,sep = \",\")",
        "Error in file(file, \"rt\") : cannot open the connection\n",
        "In addition: ",
        "Warning message:\n",
        "In file(file, \"rt\") :",
        "\n ",
        " cannot open file '\\postcodes.csv': No such file or directory\n",
        "> ",
        "",
        "> ",
        "#Markers for Map",
        "> ",
        "grouping_sub_lng_lat <- df",
        "> ",
        "grouping_sub_lng_lat <- grouping_sub_lng_lat[-c(1,2,3)]",
        "Error in grouping_sub_lng_lat[-c(1, 2, 3)] : \n  object of type 'closure' is not subsettable\n",
        "> ",
        "grouping_sub_lng_lat <- distinct(grouping_sub_lng_lat,grouping_sub_lng_lat$Suburb)",
        "Error in UseMethod(\"distinct\") : \n  no applicable method for 'distinct' applied to an object of class \"function\"\n",
        "> ",
        "names(grouping_sub_lng_lat)[1] <- \"Suburb\"",
        "Error in names(grouping_sub_lng_lat)[1] <- \"Suburb\" : \n  names() applied to a non-vector\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Add Lat to df",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in grouping_sub_lng_lat$Suburb) ",
        "+ ",
        "{grouping_sub_lng_lat$LT[x] <- postcodes_geo$latitude[match(grouping_sub_lng_lat$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error: object of type 'closure' is not subsettable\n",
        "> ",
        "",
        "> ",
        "#Add Lon to df",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in grouping_sub_lng_lat$Suburb) ",
        "+ ",
        "{grouping_sub_lng_lat$Long[x] <- postcodes_geo$longitude[match(grouping_sub_lng_lat$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error: object of type 'closure' is not subsettable\n",
        "> ",
        "",
        "> ",
        "names(grouping_sub_lng_lat)[1] <- \"Suburb\"",
        "Error in names(grouping_sub_lng_lat)[1] <- \"Suburb\" : \n  names() applied to a non-vector\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "grouping_sub_lng_lat <- arrange(grouping_sub_lng_lat,grouping_sub_lng_lat$Suburb)",
        "Error in UseMethod(\"arrange\") : \n  no applicable method for 'arrange' applied to an object of class \"function\"\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Wheelers Hill ",
        "> ",
        "grouping_sub_lng_lat[54,]",
        "Error in grouping_sub_lng_lat[54, ] : \n  object of type 'closure' is not subsettable\n",
        "> ",
        "grouping_sub_lng_lat[54,3] <- 145.1890",
        "Error in grouping_sub_lng_lat[54, 3] <- 145.189 : \n  object of type 'closure' is not subsettable\n",
        "> ",
        "grouping_sub_lng_lat[54,2] <--37.9068",
        "Error in grouping_sub_lng_lat[54, 2] <- -37.9068 : \n  object of type 'closure' is not subsettable\n",
        "> ",
        "",
        "> ",
        "#Ringwood",
        "> ",
        "grouping_sub_lng_lat[46,]",
        "Error in grouping_sub_lng_lat[46, ] : \n  object of type 'closure' is not subsettable\n",
        "> ",
        "grouping_sub_lng_lat[46,3] <- 145.2307",
        "Error in grouping_sub_lng_lat[46, 3] <- 145.2307 : \n  object of type 'closure' is not subsettable\n",
        "> ",
        "grouping_sub_lng_lat[46,2] <--37.8106",
        "Error in grouping_sub_lng_lat[46, 2] <- -37.8106 : \n  object of type 'closure' is not subsettable\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Ringwood North",
        "> ",
        "postcodes_geo[297,4] <- -37.7999",
        "Error in postcodes_geo[297, 4] <- -37.7999 : \n  object 'postcodes_geo' not found\n",
        "> ",
        "postcodes_geo[297,5] <- 145.2269",
        "Error in postcodes_geo[297, 5] <- 145.2269 : \n  object 'postcodes_geo' not found\n",
        "> ",
        "",
        "> ",
        "#Adding Suburb Amount to grouping_sub_lng_lat",
        "> ",
        "",
        "> ",
        "sum_Suburbs <- aggregate(df$Price, by=list(df$Suburb), FUN = sum, na.rm = TRUE)",
        "Error in df$Price : object of type 'closure' is not subsettable\n",
        "> ",
        "names(sum_Suburbs)[2] <- \"Amount\"",
        "Error in names(sum_Suburbs)[2] <- \"Amount\" : \n  object 'sum_Suburbs' not found\n",
        "> ",
        "grouping_sub_lng_lat$Amount <- sum_Suburbs$Amount",
        "Error: object 'sum_Suburbs' not found\n",
        "> ",
        "",
        "> ",
        "#Convert to Character so it can be added to Label",
        "> ",
        "grouping_sub_lng_lat$Amount <- as.character(grouping_sub_lng_lat$Amount)",
        "Error in grouping_sub_lng_lat$Amount : \n  object of type 'closure' is not subsettable\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Grouping Into Suburb, Days",
        "> ",
        "group_Day <- aggregate(df$Price,by = list(df$Suburb,df$Day),FUN = sum)",
        "Error in df$Price : object of type 'closure' is not subsettable\n",
        "> ",
        "names(group_Day)[1] <- \"Suburb\"",
        "Error in names(group_Day)[1] <- \"Suburb\" : object 'group_Day' not found\n",
        "> ",
        "names(group_Day)[2] <- \"Day\"",
        "Error in names(group_Day)[2] <- \"Day\" : object 'group_Day' not found\n",
        "> ",
        "names(group_Day)[3] <- \"Amount\"",
        "Error in names(group_Day)[3] <- \"Amount\" : object 'group_Day' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "group_Day$Suburb <- as.character(group_Day$Suburb)",
        "Error: object 'group_Day' not found\n",
        "> ",
        "group_Day <- group_Day %>% arrange(Suburb,Day)",
        "Error in arrange(., Suburb, Day) : object 'group_Day' not found\n",
        "> ",
        "",
        "> ",
        "#First Layer Mon",
        "> ",
        "Group_Mon <- group_Day %>% dplyr::filter(Day ==\"Mon\")",
        "Error in dplyr::filter(., Day == \"Mon\") : object 'group_Day' not found\n",
        "> ",
        "",
        "> ",
        "#Add Lat to Group_Mon",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in Group_Mon$Suburb) ",
        "+ ",
        "{Group_Mon$LT[x] <- postcodes_geo$latitude[match(Group_Mon$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error in Group_Mon : object 'Group_Mon' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Add Lon to Group_Mon",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in Group_Mon$Suburb) ",
        "+ ",
        "{Group_Mon$Long[x] <- postcodes_geo$longitude[match(Group_Mon$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error in Group_Mon : object 'Group_Mon' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Second Layer Tue",
        "> ",
        "Group_Tue <- group_Day %>% dplyr::filter(Day ==\"Tue\")",
        "Error in dplyr::filter(., Day == \"Tue\") : object 'group_Day' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Add Lat to Group_Tue",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in Group_Tue$Suburb) ",
        "+ ",
        "{Group_Tue$LT[x] <- postcodes_geo$latitude[match(Group_Tue$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error in Group_Tue : object 'Group_Tue' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Add Lon to Group_Tue",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in Group_Tue$Suburb) ",
        "+ ",
        "{Group_Tue$Long[x] <- postcodes_geo$longitude[match(Group_Tue$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error in Group_Tue : object 'Group_Tue' not found\n",
        "> ",
        "",
        "> ",
        "#Third Layer Wed",
        "> ",
        "Group_Wed <- group_Day %>% dplyr::filter(Day ==\"Wed\")",
        "Error in dplyr::filter(., Day == \"Wed\") : object 'group_Day' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Add Lat to Group_Wed",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in Group_Wed$Suburb) ",
        "+ ",
        "{Group_Wed$LT[x] <- postcodes_geo$latitude[match(Group_Wed$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error in Group_Wed : object 'Group_Wed' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Add Lon to Group_Wed",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in Group_Wed$Suburb) ",
        "+ ",
        "{Group_Wed$Long[x] <- postcodes_geo$longitude[match(Group_Wed$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error in Group_Wed : object 'Group_Wed' not found\n",
        "> ",
        "",
        "> ",
        "#Fourth Layer Thur",
        "> ",
        "Group_Thur <- group_Day %>% dplyr::filter(Day ==\"Thur\")",
        "Error in dplyr::filter(., Day == \"Thur\") : object 'group_Day' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Add Lat to Group_Thur",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in Group_Thur$Suburb) ",
        "+ ",
        "{Group_Thur$LT[x] <- postcodes_geo$latitude[match(Group_Thur$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error in Group_Thur : object 'Group_Thur' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Add Lon to Group_Thur",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in Group_Thur$Suburb) ",
        "+ ",
        "{Group_Thur$Long[x] <- postcodes_geo$longitude[match(Group_Thur$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error in Group_Thur : object 'Group_Thur' not found\n",
        "> ",
        "",
        "> ",
        "#Fifth Layer Fri",
        "> ",
        "Group_Fri <- group_Day %>% dplyr::filter(Day ==\"Fri\")%>% dplyr::filter(Amount > 0)",
        "Error in dplyr::filter(., Day == \"Fri\") : object 'group_Day' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Add Lat to Group_Fri",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in Group_Fri$Suburb) ",
        "+ ",
        "{Group_Fri$LT[x] <- postcodes_geo$latitude[match(Group_Fri$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error in Group_Fri : object 'Group_Fri' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Add Lon to Group_Fri",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in Group_Fri$Suburb) ",
        "+ ",
        "{Group_Fri$Long[x] <- postcodes_geo$longitude[match(Group_Fri$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error in Group_Fri : object 'Group_Fri' not found\n",
        "> ",
        "",
        "> ",
        "#Sixth Layer Sat",
        "> ",
        "Group_Sat <- group_Day %>% dplyr::filter(Day ==\"Sat\") %>% dplyr::filter(Amount>0)",
        "Error in dplyr::filter(., Day == \"Sat\") : object 'group_Day' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Add Lat to Group_Sat",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in Group_Sat$Suburb) ",
        "+ ",
        "{Group_Sat$LT[x] <- postcodes_geo$latitude[match(Group_Sat$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error in Group_Sat : object 'Group_Sat' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Add Lon to Group_Sat",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in Group_Sat$Suburb) ",
        "+ ",
        "{Group_Sat$Long[x] <- postcodes_geo$longitude[match(Group_Sat$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error in Group_Sat : object 'Group_Sat' not found\n",
        "> ",
        "",
        "> ",
        "#Seventh Layer Sun",
        "> ",
        "Group_Sun <- group_Day %>% dplyr::filter(Day ==\"Sun\")",
        "Error in dplyr::filter(., Day == \"Sun\") : object 'group_Day' not found\n",
        "> ",
        "",
        "> ",
        "#Add Lat to Group_Sun",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in Group_Sun$Suburb) ",
        "+ ",
        "{Group_Sun$LT[x] <- postcodes_geo$latitude[match(Group_Sun$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error in Group_Sun : object 'Group_Sun' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Add Lon to Group_Sun",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in Group_Sun$Suburb) ",
        "+ ",
        "{Group_Sun$Long[x] <- postcodes_geo$longitude[match(Group_Sun$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error in Group_Sun : object 'Group_Sun' not found\n",
        "> ",
        "",
        "> ",
        "summary(group_Day)",
        "Error in summary(group_Day) : object 'group_Day' not found\n",
        "> ",
        "",
        "> ",
        "pal <- colorNumeric(palette = \"Reds\",domain = c(5:85))",
        "> ",
        "",
        "> ",
        "summary(Group_Tue)",
        "Error in summary(Group_Tue) : object 'Group_Tue' not found\n",
        "> ",
        "",
        "> ",
        "nchar_Mon <- as.character(Group_Mon$Amount) ",
        "Error: object 'Group_Mon' not found\n",
        "> ",
        "nchar_Tue <- as.character(Group_Tue$Amount) ",
        "Error: object 'Group_Tue' not found\n",
        "> ",
        "nchar_Wed <- as.character(Group_Wed$Amount)",
        "Error: object 'Group_Wed' not found\n",
        "> ",
        "nchar_Thur <-as.character(Group_Thur$Amount)",
        "Error: object 'Group_Thur' not found\n",
        "> ",
        "nchar_Fri <-as.character(Group_Fri$Amount)",
        "Error: object 'Group_Fri' not found\n",
        "> ",
        "nchar_Sat <-as.character(Group_Sat$Amount)",
        "Error: object 'Group_Sat' not found\n",
        "> ",
        "nchar_Sun <- as.character(Group_Sun$Amount)",
        "Error: object 'Group_Sun' not found\n",
        "> ",
        "",
        "> ",
        "#Clear Map",
        "> ",
        "m_group_Days <- m_group_Days %>% clearMarkers()",
        "Error in dispatch(map, method, leaflet = { : \n  object 'm_group_Days' not found\n",
        "> ",
        "m_group_Days <- m_group_Days %>% clearControls()",
        "Error in dispatch(map, method, leaflet = { : \n  object 'm_group_Days' not found\n",
        "> ",
        "",
        "> ",
        "#Map overlay groups of each day and hour filters using sliders and shiny library  ",
        "> ",
        "",
        "> ",
        "map_group_hours <- grouping_df",
        "Error: object 'grouping_df' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "selectDay <- as.character(sort(unique(map_group_hours[,2:3][,1])))",
        "Error in unique(map_group_hours[, 2:3][, 1]) : \n  object 'map_group_hours' not found\n",
        "> ",
        "selectHour <- as.character(sort(unique(map_group_hours[,2:3][,2])))",
        "Error in unique(map_group_hours[, 2:3][, 2]) : \n  object 'map_group_hours' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Add long and lat to map_group_hours",
        "> ",
        "",
        "> ",
        "#Add Lat to map_group_hours",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in map_group_hours$Suburb) ",
        "+ ",
        "{map_group_hours$LT[x] <- postcodes_geo$latitude[match(map_group_hours$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error in map_group_hours : object 'map_group_hours' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#Add Lon to map_group_hours",
        "> ",
        "x <- 1",
        "> ",
        "for (sub in map_group_hours$Suburb) ",
        "+ ",
        "{map_group_hours$Long[x] <- postcodes_geo$longitude[match(map_group_hours$Suburb[x],postcodes_geo$suburb)]",
        "+ ",
        "x <- x+1}",
        "Error in map_group_hours : object 'map_group_hours' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ui <-bootstrapPage(",
        "+ ",
        "  sidebarLayout(",
        "+ ",
        "    sidebarPanel(",
        "+ ",
        "      selectInput(\"Day\",\"Enter Weekday\", choices = c(selectDay),selected = selectDay[4]),",
        "+ ",
        "      selectInput(\"Hour\",\"Enter Time\", choices = c(selectHour),selected = selectHour[16]),",
        "+ ",
        "      width= 12",
        "+ ",
        "    ),",
        "+ ",
        "    mainPanel(leafletOutput(\"map\"), width = 12)",
        "+ ",
        "  ))",
        "Error in force(default) : object 'selectDay' not found\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "server <- function(input,output,session) {",
        "+ ",
        "  ",
        "+ ",
        "  observe({",
        "+ ",
        "    x <- input$Day",
        "+ ",
        "    ",
        "+ ",
        "    ",
        "+ ",
        "    updateSelectInput(session,\"Hour\",",
        "+ ",
        "                      label = \"Select Hour:\",",
        "+ ",
        "                      choices = map_group_hours$Hour[map_group_hours$Day == x],",
        "+ ",
        "                      selected = head(map_group_hours$Hour[map_group_hours$Day == x],1))",
        "+ ",
        "  })",
        "+ ",
        "  ",
        "+ ",
        "  filtered <- reactive({dplyr::filter(map_group_hours,map_group_hours$Day == isolate({input$Day})",
        "+ ",
        "                                      & map_group_hours$Hour == input$Hour)})",
        "+ ",
        "  ",
        "+ ",
        "  colpal <-reactive({colorNumeric(palette = \"Greens\", ",
        "+ ",
        "                                  domain = c(min((filtered()[[4]])):(max(filtered()[[4]])+1)))})",
        "+ ",
        "  ",
        "+ ",
        "  output$map <- renderLeaflet({",
        "+ ",
        "    leaflet() %>%",
        "+ ",
        "      addTiles()})",
        "+ ",
        "  ",
        "+ ",
        "  observe({",
        "+ ",
        "    pal <- colpal ()",
        "+ ",
        "    ",
        "+ ",
        "    leafletProxy(\"map\", data = filtered()) %>%",
        "+ ",
        "      clearMarkers() %>% ",
        "+ ",
        "      addCircleMarkers(lat = ~LT, lng = ~Long, fill = TRUE, fillOpacity = 1,",
        "+ ",
        "                       label = ~Suburb, popup = ~as.character(Price),color = ~pal(Price))",
        "+ ",
        "  })",
        "+ ",
        "  ",
        "+ ",
        "  observe({",
        "+ ",
        "    proxy <- leafletProxy(\"map\",data = filtered())",
        "+ ",
        "    ",
        "+ ",
        "    proxy %>% clearControls()",
        "+ ",
        "    pal <- colpal()",
        "+ ",
        "    proxy %>% addLegend(position = \"bottomright\", pal = pal, values = ~Price) %>%",
        "+ ",
        "      fitBounds(~min(Long), ~min(LT), ~max(Long), ~max(LT))",
        "+ ",
        "  })",
        "+ ",
        "}",
        "> ",
        "shinyApp(ui = ui,server = server)",
        "Error in force(ui) : object 'ui' not found\n",
        "\nRestarting R session...\n\n"
    ]
}