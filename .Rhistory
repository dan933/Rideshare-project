label = ~Suburb, popup = ~as.character(Price),color = ~pal(Price))
})
observe({
proxy <- leafletProxy("map",data = filtered())
proxy %>% clearControls()
pal <- colpal()
proxy %>% addLegend(position = "bottomright", pal = pal, values = ~Price) %>%
fitBounds(~min(Long), ~min(LT), ~max(Long), ~max(LT))
})
}
shinyApp(ui = ui,server = server)
library("shiny")
library("dplyr")
library("leaflet")
ui <- bootstrapPage(
tags$style(type = "text/css","html,
body{width:100%;height:100%}"),
leafletOutput("map",width = "100%",height = "100%"),
absolutePanel(top =20,right=50,
selectInput("Day","Enter Weekday", choices = c(selectDay),selected = selectDay[4]),
selectInput("Hour","Enter Time",
choices = c(selectHour),selected = selectHour[16])))
server <- function(input,output,session) {
observe({
x <- input$Day
updateSelectInput(session,"Hour",
label = "Select Hour:",
choices = map_group_hours$Hour[map_group_hours$Day == x],
selected = head(map_group_hours$Hour[map_group_hours$Day == x],1))
})
filtered <- reactive({dplyr::filter(map_group_hours,map_group_hours$Day == isolate({input$Day})
& map_group_hours$Hour == input$Hour)})
colpal <-reactive({colorNumeric(palette = "Reds",
domain = c(min((filtered()[[4]])):(max(filtered()[[4]])+1)))})
output$map <- renderLeaflet({
leaflet() %>%
addTiles()})
observe({
pal <- colpal ()
leafletProxy("map", data = filtered()) %>%
clearMarkers() %>%
addCircleMarkers(lat = ~LT, lng = ~Long, fill = TRUE, fillOpacity = 1,
label = ~Suburb, popup = ~as.character(Price),color = ~pal(Price))
})
observe({
proxy <- leafletProxy("map",data = filtered())
proxy %>% clearControls()
pal <- colpal()
proxy %>% addLegend(position = "bottomright", pal = pal, values = ~Price) %>%
fitBounds(~min(Long), ~min(LT), ~max(Long), ~max(LT))
})
}
shinyApp(ui = ui,server = server)
library("shiny")
library("dplyr")
library("leaflet")
ui <- bootstrapPage(
tags$style(type = "text/css","html,
body{width:100%;height:100%}"),
leafletOutput("map",width = "100%",height = "100%"),
absolutePanel(top =20,right=50,
selectInput("Day","Enter Weekday", choices = c(selectDay),selected = selectDay[4]),
selectInput("Hour","Enter Time",
choices = c(selectHour),selected = selectHour[16])))
server <- function(input,output,session) {
observe({
x <- input$Day
updateSelectInput(session,"Hour",
label = "Select Hour:",
choices = map_group_hours$Hour[map_group_hours$Day == x],
selected = head(map_group_hours$Hour[map_group_hours$Day == x],1))
})
filtered <- reactive({dplyr::filter(map_group_hours,map_group_hours$Day == isolate({input$Day})
& map_group_hours$Hour == input$Hour)})
colpal <-reactive({colorNumeric(palette = "Reds",
domain = c(min((filtered()[[4]])):(max(filtered()[[4]])+1)))})
output$map <- renderLeaflet({
leaflet() %>%
addTiles()})
observe({
pal <- colpal ()
leafletProxy("map", data = filtered()) %>%
clearMarkers() %>%
addCircleMarkers(lat = ~LT, lng = ~Long, fill = TRUE, fillOpacity = 1,
label = ~Suburb, popup = ~as.character(Price),color = ~pal(Price))
})
observe({
proxy <- leafletProxy("map",data = filtered())
proxy %>% clearControls()
pal <- colpal()
proxy %>% addLegend(position = "bottomright", pal = pal, values = ~Price) %>%
fitBounds(~min(Long), ~min(LT), ~max(Long), ~max(LT))
})
}
shinyApp(ui = ui,server = server)
library("shiny")
library("dplyr")
library("leaflet")
ui <- bootstrapPage(
tags$style(type = "text/css","html,
body{width:100%;height:100%}"),
leafletOutput("map",width = "100%",height = "100%"),
absolutePanel(top =20,right=50,
selectInput("Day","Enter Weekday", choices = c(selectDay),selected = selectDay[4]),
selectInput("Hour","Enter Time",
choices = c(selectHour),selected = selectHour[16])))
server <- function(input,output,session) {
observe({
x <- input$Day
updateSelectInput(session,"Hour",
label = "Select Hour:",
choices = map_group_hours$Hour[map_group_hours$Day == x],
selected = head(map_group_hours$Hour[map_group_hours$Day == x],1))
})
filtered <- reactive({dplyr::filter(map_group_hours,map_group_hours$Day == isolate({input$Day})
& map_group_hours$Hour == input$Hour)})
colpal <-reactive({colorNumeric(palette = "Reds",
domain = c(min((filtered()[[4]])):(max(filtered()[[4]])+1)))})
output$map <- renderLeaflet({
leaflet() %>%
addTiles()})
observe({
pal <- colpal ()
leafletProxy("map", data = filtered()) %>%
clearMarkers() %>%
addCircleMarkers(lat = ~LT, lng = ~Long, fill = TRUE, fillOpacity = 1,
label = ~Suburb, popup = ~as.character(Price),color = ~pal(Price))
})
observe({
proxy <- leafletProxy("map",data = filtered())
proxy %>% clearControls()
pal <- colpal()
proxy %>% addLegend(position = "bottomright", pal = pal, values = ~Price) %>%
fitBounds(~min(Long), ~min(LT), ~max(Long), ~max(LT))
})
}
shinyApp(ui = ui,server = server)
library("shiny")
library("dplyr")
library("leaflet")
ui <- bootstrapPage(
tags$style(type = "text/css","html,
body{width:100%;height:100%}"),
leafletOutput("map",width = "100%",height = "100%"),
absolutePanel(top =20,right=50,
selectInput("Day","Enter Weekday", choices = c(selectDay),selected = selectDay[4]),
selectInput("Hour","Enter Time",
choices = c(selectHour),selected = selectHour[16])))
server <- function(input,output,session) {
observe({
x <- input$Day
updateSelectInput(session,"Hour",
label = "Select Hour:",
choices = map_group_hours$Hour[map_group_hours$Day == x],
selected = head(map_group_hours$Hour[map_group_hours$Day == x],1))
})
filtered <- reactive({dplyr::filter(map_group_hours,map_group_hours$Day == isolate({input$Day})
& map_group_hours$Hour == input$Hour)})
colpal <-reactive({colorNumeric(palette = "Reds",
domain = c(min((filtered()[[4]])):(max(filtered()[[4]])+1)))})
output$map <- renderLeaflet({
leaflet() %>%
addTiles()})
observe({
pal <- colpal ()
leafletProxy("map", data = filtered()) %>%
clearMarkers() %>%
addCircleMarkers(lat = ~LT, lng = ~Long, fill = TRUE, fillOpacity = 1,
label = ~Suburb, popup = ~as.character(Price),color = ~pal(Price))
})
observe({
proxy <- leafletProxy("map",data = filtered())
proxy %>% clearControls()
pal <- colpal()
proxy %>% addLegend(position = "bottomright", pal = pal, values = ~Price) %>%
fitBounds(~min(Long), ~min(LT), ~max(Long), ~max(LT))
})
}
shinyApp(ui = ui,server = server)
library("shiny")
library("dplyr")
library("leaflet")
ui <- bootstrapPage(
tags$style(type = "text/css","html,
body{width:100%;height:100%}"),
leafletOutput("map",width = "100%",height = "100%"),
absolutePanel(top =20,right=50,
selectInput("Day","Enter Weekday", choices = c(selectDay),selected = selectDay[4]),
selectInput("Hour","Enter Time",
choices = c(selectHour),selected = selectHour[16])))
server <- function(input,output,session) {
observe({
x <- input$Day
updateSelectInput(session,"Hour",
label = "Select Hour:",
choices = map_group_hours$Hour[map_group_hours$Day == x],
selected = head(map_group_hours$Hour[map_group_hours$Day == x],1))
})
filtered <- reactive({dplyr::filter(map_group_hours,map_group_hours$Day == isolate({input$Day})
& map_group_hours$Hour == input$Hour)})
colpal <-reactive({colorNumeric(palette = "Reds",
domain = c(min((filtered()[[4]])):(max(filtered()[[4]])+1)))})
output$map <- renderLeaflet({
leaflet() %>%
addTiles()})
observe({
pal <- colpal ()
leafletProxy("map", data = filtered()) %>%
clearMarkers() %>%
addCircleMarkers(lat = ~LT, lng = ~Long, fill = TRUE, fillOpacity = 1,
label = ~Suburb, popup = ~as.character(Price),color = ~pal(Price))
})
observe({
proxy <- leafletProxy("map",data = filtered())
proxy %>% clearControls()
pal <- colpal()
proxy %>% addLegend(position = "bottomright", pal = pal, values = ~Price) %>%
fitBounds(~min(Long), ~min(LT), ~max(Long), ~max(LT))
})
}
shinyApp(ui = ui,server = server)
#Color pal adjusted for N.A values nex step is to add legend and zoom bounds
library("shiny")
library("dplyr")
library("leaflet")
selectDay <- as.character(sort(unique(map_group_hours[,2:3][,1])))
selectHour <- as.character(sort(unique(map_group_hours[,2:3][,2])))
ui <- bootstrapPage(
tags$style(type = "text/css","html,
body{width:100%;height:100%}"),
leafletOutput("map",width = "100%",height = "100%"),
absolutePanel(top =20,right=50,
selectInput("Day","Enter Weekday", choices = c(selectDay),selected = selectDay[4]),
selectInput("Hour","Enter Time",
choices = c(selectHour),selected = selectHour[16])))
server <- function(input,output,session) {
observe({
x <- input$Day
updateSelectInput(session,"Hour",
label = "Select Hour:",
choices = map_group_hours$Hour[map_group_hours$Day == x],
selected = head(map_group_hours$Hour[map_group_hours$Day == x],1))
})
filtered <- reactive({dplyr::filter(map_group_hours,map_group_hours$Day == isolate({input$Day})
& map_group_hours$Hour == input$Hour)})
colpal <-reactive({colorNumeric(palette = "Reds",
domain = c(min(filtered()[[4]]):(max(filtered()[[4]])+1)))})
output$map <- renderLeaflet({
leaflet() %>%
addTiles()})
observe({
pal <- colpal ()
leafletProxy("map", data = filtered()) %>%
clearMarkers() %>%
addCircleMarkers(lat = ~LT, lng = ~Long, radius = 7,
label = ~Suburb, popup = ~as.character(Price),color = ~pal(Price))})
}
shinyApp(ui = ui,server = server)
#Test legend and zoom bound
library("shiny")
library("dplyr")
library("leaflet")
ui <- bootstrapPage(
tags$style(type = "text/css","html,
body{width:100%;height:100%}"),
leafletOutput("map",width = "100%",height = "100%"),
absolutePanel(top =20,right=50,
selectInput("Day","Enter Weekday", choices = c(selectDay),selected = selectDay[4]),
selectInput("Hour","Enter Time",
choices = c(selectHour),selected = selectHour[16])))
server <- function(input,output,session) {
observe({
x <- input$Day
updateSelectInput(session,"Hour",
label = "Select Hour:",
choices = map_group_hours$Hour[map_group_hours$Day == x],
selected = head(map_group_hours$Hour[map_group_hours$Day == x],1))
})
filtered <- reactive({dplyr::filter(map_group_hours,map_group_hours$Day == isolate({input$Day})
& map_group_hours$Hour == input$Hour)})
colpal <-reactive({colorNumeric(palette = "Reds",
domain = c(min((filtered()[[4]])):(max(filtered()[[4]])+1)))})
output$map <- renderLeaflet({
leaflet() %>%
addTiles()})
observe({
pal <- colpal ()
leafletProxy("map", data = filtered()) %>%
clearMarkers() %>%
addCircleMarkers(lat = ~LT, lng = ~Long, fill = TRUE, fillOpacity = 1,
label = ~Suburb, popup = ~as.character(Price),color = ~pal(Price))
})
observe({
proxy <- leafletProxy("map",data = filtered())
proxy %>% clearControls()
pal <- colpal()
proxy %>% addLegend(position = "bottomright", pal = pal, values = ~Price) %>%
fitBounds(~min(Long), ~min(LT), ~max(Long), ~max(LT))
})
}
shinyApp(ui = ui,server = server)
library("shiny")
library("dplyr")
library("leaflet")
ui <- bootstrapPage(
tags$style(type = "text/css","html,
body{width:100%;height:100%}"),
leafletOutput("map",width = "100%",height = "100%"),
absolutePanel(top =20,right=50,
selectInput("Day","Enter Weekday", choices = c(selectDay),selected = selectDay[4]),
selectInput("Hour","Enter Time",
choices = c(selectHour),selected = selectHour[16])))
server <- function(input,output,session) {
observe({
x <- input$Day
updateSelectInput(session,"Hour",
label = "Select Hour:",
choices = map_group_hours$Hour[map_group_hours$Day == x],
selected = head(map_group_hours$Hour[map_group_hours$Day == x],1))
})
filtered <- reactive({dplyr::filter(map_group_hours,map_group_hours$Day == isolate({input$Day})
& map_group_hours$Hour == input$Hour)})
colpal <-reactive({colorNumeric(palette = "Reds",
domain = c(min((filtered()[[4]])):(max(filtered()[[4]])+1)))})
output$map <- renderLeaflet({
leaflet() %>%
addTiles()})
observe({
pal <- colpal ()
leafletProxy("map", data = filtered()) %>%
clearMarkers() %>%
addCircleMarkers(lat = ~LT, lng = ~Long, fill = TRUE, fillOpacity = 1,
label = ~Suburb, popup = ~as.character(Price),color = ~pal(Price))
})
observe({
proxy <- leafletProxy("map",data = filtered())
proxy %>% clearControls()
pal <- colpal()
proxy %>% addLegend(position = "bottomright", pal = pal, values = ~Price) %>%
fitBounds(~min(Long), ~min(LT), ~max(Long), ~max(LT))
})
}
shinyApp(ui = ui,server = server)
library("shiny")
library("dplyr")
library("leaflet")
ui <- bootstrapPage(
tags$style(type = "text/css","html,
body{width:100%;height:100%}"),
leafletOutput("map",width = "100%",height = "100%"),
absolutePanel(top =20,right=50,
selectInput("Day","Enter Weekday", choices = c(selectDay),selected = selectDay[4]),
selectInput("Hour","Enter Time",
choices = c(selectHour),selected = selectHour[16])))
server <- function(input,output,session) {
observe({
x <- input$Day
updateSelectInput(session,"Hour",
label = "Select Hour:",
choices = map_group_hours$Hour[map_group_hours$Day == x],
selected = head(map_group_hours$Hour[map_group_hours$Day == x],1))
})
filtered <- reactive({dplyr::filter(map_group_hours,map_group_hours$Day == isolate({input$Day})
& map_group_hours$Hour == input$Hour)})
colpal <-reactive({colorNumeric(palette = "Reds",
domain = c(min((filtered()[[4]])):(max(filtered()[[4]])+1)))})
output$map <- renderLeaflet({
leaflet() %>%
addTiles()})
observe({
pal <- colpal ()
leafletProxy("map", data = filtered()) %>%
clearMarkers() %>%
addCircleMarkers(lat = ~LT, lng = ~Long, fill = TRUE, fillOpacity = 1,
label = ~Suburb, popup = ~as.character(Price),color = ~pal(Price))
})
observe({
proxy <- leafletProxy("map",data = filtered())
proxy %>% clearControls()
pal <- colpal()
proxy %>% addLegend(position = "bottomright", pal = pal, values = ~Price) %>%
fitBounds(~min(Long), ~min(LT), ~max(Long), ~max(LT))
})
}
shinyApp(ui = ui,server = server)
library("shiny")
library("dplyr")
library("leaflet")
ui <- bootstrapPage(
tags$style(type = "text/css","html,
body{width:100%;height:100%}"),
leafletOutput("map",width = "100%",height = "100%"),
absolutePanel(top =20,right=50,
selectInput("Day","Enter Weekday", choices = c(selectDay),selected = selectDay[4]),
selectInput("Hour","Enter Time",
choices = c(selectHour),selected = selectHour[16])))
server <- function(input,output,session) {
observe({
x <- input$Day
updateSelectInput(session,"Hour",
label = "Select Hour:",
choices = map_group_hours$Hour[map_group_hours$Day == x],
selected = head(map_group_hours$Hour[map_group_hours$Day == x],1))
})
filtered <- reactive({dplyr::filter(map_group_hours,map_group_hours$Day == isolate({input$Day})
& map_group_hours$Hour == input$Hour)})
colpal <-reactive({colorNumeric(palette = "Reds",
domain = c(min((filtered()[[4]])):(max(filtered()[[4]])+1)))})
output$map <- renderLeaflet({
leaflet() %>%
addTiles()})
observe({
pal <- colpal ()
leafletProxy("map", data = filtered()) %>%
clearMarkers() %>%
addCircleMarkers(lat = ~LT, lng = ~Long, fill = TRUE, fillOpacity = 1,
label = ~Suburb, popup = ~as.character(Price),color = ~pal(Price))
})
observe({
proxy <- leafletProxy("map",data = filtered())
proxy %>% clearControls()
pal <- colpal()
proxy %>% addLegend(position = "bottomright", pal = pal, values = ~Price) %>%
fitBounds(~min(Long), ~min(LT), ~max(Long), ~max(LT))
})
}
shinyApp(ui = ui,server = server)
library("shiny")
library("dplyr")
library("leaflet")
ui <- bootstrapPage(
tags$style(type = "text/css","html,
body{width:100%;height:100%}"),
leafletOutput("map",width = "100%",height = "100%"),
absolutePanel(top =20,right=50,
selectInput("Day","Enter Weekday", choices = c(selectDay),selected = selectDay[4]),
selectInput("Hour","Enter Time",
choices = c(selectHour),selected = selectHour[16])))
server <- function(input,output,session) {
observe({
x <- input$Day
updateSelectInput(session,"Hour",
label = "Select Hour:",
choices = map_group_hours$Hour[map_group_hours$Day == x],
selected = head(map_group_hours$Hour[map_group_hours$Day == x],1))
})
filtered <- reactive({dplyr::filter(map_group_hours,map_group_hours$Day == isolate({input$Day})
& map_group_hours$Hour == input$Hour)})
colpal <-reactive({colorNumeric(palette = "Reds",
domain = c(min((filtered()[[4]])):(max(filtered()[[4]])+1)))})
output$map <- renderLeaflet({
leaflet() %>%
addTiles()})
observe({
pal <- colpal ()
leafletProxy("map", data = filtered()) %>%
clearMarkers() %>%
addCircleMarkers(lat = ~LT, lng = ~Long, fill = TRUE, fillOpacity = 1,
label = ~Suburb, popup = ~as.character(Price),color = ~pal(Price))
})
observe({
proxy <- leafletProxy("map",data = filtered())
proxy %>% clearControls()
pal <- colpal()
proxy %>% addLegend(position = "bottomright", pal = pal, values = ~Price) %>%
fitBounds(~min(Long), ~min(LT), ~max(Long), ~max(LT))
})
}
shinyApp(ui = ui,server = server)
View(map_group_hours)
library("shiny")
library("dplyr")
library("leaflet")
ui <- bootstrapPage(
tags$style(type = "text/css","html,
body{width:100%;height:100%}"),
leafletOutput("map",width = "100%",height = "100%"),
absolutePanel(top =20,right=50,
selectInput("Day","Enter Weekday", choices = c(selectDay),selected = selectDay[4]),
selectInput("Hour","Enter Time",
choices = c(selectHour),selected = selectHour[16])))
server <- function(input,output,session) {
observe({
x <- input$Day
updateSelectInput(session,"Hour",
label = "Select Hour:",
choices = map_group_hours$Hour[map_group_hours$Day == x],
selected = head(map_group_hours$Hour[map_group_hours$Day == x],1))
})
filtered <- reactive({dplyr::filter(map_group_hours,map_group_hours$Day == isolate({input$Day})
& map_group_hours$Hour == input$Hour)})
colpal <-reactive({colorNumeric(palette = "Reds",
domain = c(min((filtered()[[4]])):(max(filtered()[[4]])+1)))})
output$map <- renderLeaflet({
leaflet() %>%
addTiles()})
observe({
pal <- colpal ()
leafletProxy("map", data = filtered()) %>%
clearMarkers() %>%
addCircleMarkers(lat = ~LT, lng = ~Long, fill = TRUE, fillOpacity = 1,
label = ~Suburb, popup = ~as.character(Price),color = ~pal(Price))
})
observe({
proxy <- leafletProxy("map",data = filtered())
proxy %>% clearControls()
pal <- colpal()
proxy %>% addLegend(position = "bottomright", pal = pal, values = ~Price) %>%
fitBounds(~min(Long), ~min(LT), ~max(Long), ~max(LT))
})
}
shinyApp(ui = ui,server = server)
